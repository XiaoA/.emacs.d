#+TITLE: My Emacs Customizations
#+AUTHOR: Andrew Buckingham
#+OPTIONS: num:nil toc:nil

* Who doesn't love packages?

  #+BEGIN_SRC emacs-lisp
    ;;Who doesn't love packages?
    (require 'package)
    (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/") ("melpa" . "http://melpa.org/packages/") ("org" . "http://orgmode.org/elpa/")))

    (unless package--initialized (package-initialize t))

  #+END_SRC

  #+RESULTS:

  #+BEGIN_SRC emacs-lisp
      ;; Load Packages
    (add-to-list 'load-path "~/.emacs.d/elpa/")
  #+END_SRC

  #+RESULTS:
  | /Users/abuckingham/.emacs.d/elpa/org-clock-csv-20190418.1505 | /Users/abuckingham/.emacs.d/elpa/s-20180406.808 | ~/.emacs.d/elpa/ace-jump-mode*/ | ~/.emacs.d/vendor/ | ~/.emacs.d/snippets/ruby-mode | ~/.emacs.d/snippets/org-mode | ~/.emacs.d/snippets/markdown-mode/ | ~/.emacs.d/snippets/web-mode/ | ~/.emacs.d/elpa/yasnippet | ~/.emacs.d/elpa/ | /Users/abuckingham/.emacs.d/elpa/ace-jump-mode-20140616.815 | /Users/abuckingham/.emacs.d/elpa/auto-complete-20170125.245 | /Users/abuckingham/.emacs.d/elpa/company-20190402.2323 | /Users/abuckingham/.emacs.d/elpa/enh-ruby-mode-20190325.2132 | /Users/abuckingham/.emacs.d/elpa/exotica-theme-20180212.2329 | /Users/abuckingham/.emacs.d/elpa/flymake-ruby-20170723.146 | /Users/abuckingham/.emacs.d/elpa/flymake-easy-20140818.755 | /Users/abuckingham/.emacs.d/elpa/helm-ag-20170209.1545 | /Users/abuckingham/.emacs.d/elpa/helm-projectile-20180815.1514 | /Users/abuckingham/.emacs.d/elpa/helm-20190405.1842 | /Users/abuckingham/.emacs.d/elpa/helm-core-20190326.921 | /Users/abuckingham/.emacs.d/elpa/js2-mode-20190307.1649 | /Users/abuckingham/.emacs.d/elpa/lorem-ipsum-20140911.2108 | /Users/abuckingham/.emacs.d/elpa/magit-20190405.1704 | /Users/abuckingham/.emacs.d/elpa/git-commit-20190319.2352 | /Users/abuckingham/.emacs.d/elpa/markdown-mode-20190305.319 | /Users/abuckingham/.emacs.d/elpa/minitest-20160628.1820 | /Users/abuckingham/.emacs.d/elpa/multiple-cursors-20190317.1211 | /Users/abuckingham/.emacs.d/elpa/neotree-20181121.2026 | /Users/abuckingham/.emacs.d/elpa/nyan-mode-20170423.740 | /Users/abuckingham/.emacs.d/elpa/org-plus-contrib-20190402 | /Users/abuckingham/.emacs.d/elpa/ox-pandoc-20180510.1338 | /Users/abuckingham/.emacs.d/elpa/ht-20190404.1202 | /Users/abuckingham/.emacs.d/elpa/popup-20160709.1429 | /Users/abuckingham/.emacs.d/elpa/powerline-20190323.213 | /Users/abuckingham/.emacs.d/elpa/projectile-20190403.619 | /Users/abuckingham/.emacs.d/elpa/pkg-info-20150517.1143 | /Users/abuckingham/.emacs.d/elpa/epl-20180205.2049 | /Users/abuckingham/.emacs.d/elpa/rinari-20150709.640 | /Users/abuckingham/.emacs.d/elpa/jump-20161127.128 | /Users/abuckingham/.emacs.d/elpa/inflections-20170913.916 | /Users/abuckingham/.emacs.d/elpa/findr-20130127.2032 | /Users/abuckingham/.emacs.d/elpa/robe-20190305.2146 | /Users/abuckingham/.emacs.d/elpa/rspec-mode-20190326.1422 | /Users/abuckingham/.emacs.d/elpa/ruby-compilation-20150709.640 | /Users/abuckingham/.emacs.d/elpa/inf-ruby-20190219.1147 | /Users/abuckingham/.emacs.d/elpa/ruby-electric-20170810.1130 | /Users/abuckingham/.emacs.d/elpa/ruby-end-20141215.1223 | /Users/abuckingham/.emacs.d/elpa/transient-20190319.1928 | /Users/abuckingham/.emacs.d/elpa/dash-20190320.1406 | /Users/abuckingham/.emacs.d/elpa/tron-theme-12 | /Users/abuckingham/.emacs.d/elpa/undo-tree-0.6.5 | /Users/abuckingham/.emacs.d/elpa/web-mode-20190301.1700 | /Users/abuckingham/.emacs.d/elpa/with-editor-20190224.931 | /Users/abuckingham/.emacs.d/elpa/async-20181224.454 | /Users/abuckingham/.emacs.d/elpa/yaml-mode-20180409.607 | /Users/abuckingham/.emacs.d/elpa/yasnippet-20181015.1212 | /Library/Application Support/Emacs/26.1/site-lisp | /Library/Application Support/Emacs/site-lisp | /Applications/Emacs.app/Contents/Resources/site-lisp | /Applications/Emacs.app/Contents/Resources/lisp | /Applications/Emacs.app/Contents/Resources/lisp/vc | /Applications/Emacs.app/Contents/Resources/lisp/url | /Applications/Emacs.app/Contents/Resources/lisp/textmodes | /Applications/Emacs.app/Contents/Resources/lisp/progmodes | /Applications/Emacs.app/Contents/Resources/lisp/play | /Applications/Emacs.app/Contents/Resources/lisp/org | /Applications/Emacs.app/Contents/Resources/lisp/nxml | /Applications/Emacs.app/Contents/Resources/lisp/net | /Applications/Emacs.app/Contents/Resources/lisp/mh-e | /Applications/Emacs.app/Contents/Resources/lisp/mail | /Applications/Emacs.app/Contents/Resources/lisp/leim | /Applications/Emacs.app/Contents/Resources/lisp/language | /Applications/Emacs.app/Contents/Resources/lisp/international | /Applications/Emacs.app/Contents/Resources/lisp/image | /Applications/Emacs.app/Contents/Resources/lisp/gnus | /Applications/Emacs.app/Contents/Resources/lisp/eshell | /Applications/Emacs.app/Contents/Resources/lisp/erc | /Applications/Emacs.app/Contents/Resources/lisp/emulation | /Applications/Emacs.app/Contents/Resources/lisp/emacs-lisp | /Applications/Emacs.app/Contents/Resources/lisp/cedet | /Applications/Emacs.app/Contents/Resources/lisp/calendar | /Applications/Emacs.app/Contents/Resources/lisp/calc | /Applications/Emacs.app/Contents/Resources/lisp/obsolete |

* Multiple Cursors

  #+BEGIN_SRC emacs-lisp
;; Multiple Cursors
;; (Magnar is an Emacs god!)
;; https://github.com/magnars |http://www.emacsrocks.com 
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C->") 'mc/mark-all-words-like-this)
  #+END_SRC

  #+RESULTS:
  : mc/mark-all-words-like-this

** Goal columns are useful!
   #+BEGIN_SRC emacs-lisp
;; Goal columns are useful!
;; Enable set-goal-column
(put 'set-goal-column 'disabled nil)
   #+END_SRC

   #+RESULTS:
   
* UI/UX Tweaks
  #+BEGIN_SRC emacs-lisp
;; UI Tweaks
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'fringe-mode) (fringe-mode -1))
  #+END_SRC

  #+RESULTS:
  : ((vertical-scroll-bars) (left-fringe . -1) (right-fringe . -1))

** No splash screen on startup
   #+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
   #+END_SRC

   #+RESULTS:
   : t

** I prefer a blank \*scratch\* buffer
   #+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
   #+END_SRC

   #+RESULTS:

** Just Y/N
   #+BEGIN_SRC emacs-lisp
;; type "y"/"n" instead of "yes"/"no"
(fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   #+RESULTS:
   : y-or-n-p

** Use Helm Mode
   #+BEGIN_SRC emacs-lisp
;; Use Helm Mode
(helm-mode 1)
   #+END_SRC

   #+RESULTS:
   : t

** Set up Helm Keyboard Shortcuts
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x RET") 'helm-M-x)

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(global-set-key (kbd "C-x b") 'helm-mini)

(global-set-key (kbd "C-x C-f") 'helm-find-files)

(global-set-key (kbd "C-c h o") 'helm-occur)

(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

(global-set-key (kbd "C-c h x") 'helm-register)

   #+END_SRC

   #+RESULTS:
   : helm-register



** Load default theme
   #+BEGIN_SRC emacs-lisp
     (load-theme 'vscode-dark-plus t)
   #+END_SRC

   #+RESULTS:
   : t

** Behold, the power of Powerline
   #+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-center-theme)
   #+END_SRC

   #+RESULTS:
** Set default font
#+BEGIN_SRC emacs-lisp
;;(set-default-font "Menlo-17")
#+END_SRC

#+RESULTS:

* Set up my custom.el file
  #+BEGIN_SRC emacs-lisp
;;Set up my custom.el file
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
  #+END_SRC

  #+RESULTS:
  : t

* Webdev
  #+BEGIN_SRC emacs-lisp
;; Use web-mode whenever possible...
(setq auto-mode-alist (cons '("\\.html$" . web-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.aspx$" . web-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.erb$" . web-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.php$" . web-mode) auto-mode-alist))
  #+END_SRC

  #+RESULTS:
  : ((\.php$ . web-mode) (\.erb$ . web-mode) (\.aspx$ . web-mode) (\.html$ . web-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.rake\' . ruby-mode) (Rakefile\' . ruby-mode) (\.mkd\' . markdown-mode) (\.org\â€™ . org-mode) (\.php$ . web-mode) (\.erb$ . web-mode) (\.aspx$ . web-mode) (\.html$ . web-mode) (/git-rebase-todo\' . git-rebase-mode) (\.md\' . markdown-mode) (\.markdown\' . markdown-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

* Byte Recompile
  #+BEGIN_SRC emacs-lisp
;; Byte Recompile
(defun ab/byte-recompile ()
  (interactive)
  (byte-recompile-directory "~/.emacs.d" 0))
  #+END_SRC

  #+RESULTS:
  : ab/byte-recompile

* Increment Number at Point

  #+BEGIN_SRC emacs-lisp
;; Increment Number at Point
;;Got this from EmacsWiki; enables incremental numbers. First input
  ;; numbers and then use this!
  (defun ab/increment-number-at-point ()
      (interactive)
      (skip-chars-backward "0123456789")
      (or (looking-at "[0123456789]+")
          (error "No number at point"))
      (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
  #+END_SRC

  #+RESULTS:
  : ab/increment-number-at-point

* Paren-Mode
  #+BEGIN_SRC emacs-lisp
;; Paren-Mode
(require 'paren)
(show-paren-mode t)
  #+END_SRC

  #+RESULTS:
  : t

* Because Alt-x is usually too awkward
  #+BEGIN_SRC emacs-lisp
;; A great tip from Steve Yegge. Because Alt-x is too awkward...
;; (global-set-key "\C-x\C-m" 'execute-extended-command)
;; Experimenting with 'helm-M-x; see 'Helm Keyboard Shortcuts,' above
  #+END_SRC

  #+RESULTS:

* Org-Mode 

** Require Org
   #+BEGIN_SRC emacs-lisp
;; Require Org-Mode
(require 'org)
   #+END_SRC

   #+RESULTS:
   : org

   #+BEGIN_SRC emacs-lisp
;; It's more convenient to press 'Return' to follow a link from Org an C-c C-l.
(setq org-return-follows-link t)    
   #+END_SRC

   #+RESULTS:
   : t

   #+BEGIN_SRC emacs-lisp
;; Set up Org-Mode
(add-to-list 'auto-mode-alist '("\\.org\\â€™" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-log-done t)
   #+END_SRC 

   #+RESULTS:
   : t

** Org-Mode Hooks
   Make yasnippet work properly with org-mode. 
   #+BEGIN_SRC emacs-lisp
;;  Make yasnippet work properly with org-mode. 
;;  (defun yas/org-very-safe-expand ()
;;    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil))
    (and (fboundp 'yas-expand) (yas-expand))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'org-tab-first-hook
                         'yas-org-very-safe-expand)
            ))

   #+END_SRC

   #+RESULTS:
   | (lambda nil (local-set-key \216 (quote outline-next-visible-heading)) (local-set-key \220 (quote outline-previous-visible-heading)) (local-set-key \225 (quote outline-up-heading)) (local-set-key \227 (quote org-table-copy-region)) (local-set-key \231 (quote org-table-paste-rectangle)) (local-set-key \214 (quote org-table-sort-lines)) (local-set-key \311 (quote org-toggle-iimage-in-org))) | (lambda nil (add-to-list (quote org-tab-first-hook) (quote yas-org-very-safe-expand))) | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

   #+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)
              ;; yasnippet (using the new org-cycle hooks)
              ;;(make-variable-buffer-local 'yas/trigger-key)
              ;;(setq yas/trigger-key [tab])
              ;;(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              ;;(define-key yas/keymap [tab] 'yas/next-field)
              ))
   #+END_SRC

   #+RESULTS:
   | (lambda nil (local-set-key \216 (quote outline-next-visible-heading)) (local-set-key \220 (quote outline-previous-visible-heading)) (local-set-key \225 (quote outline-up-heading)) (local-set-key \227 (quote org-table-copy-region)) (local-set-key \231 (quote org-table-paste-rectangle)) (local-set-key \214 (quote org-table-sort-lines)) (local-set-key \311 (quote org-toggle-iimage-in-org))) | (lambda nil (add-to-list (quote org-tab-first-hook) (quote yas-org-very-safe-expand))) | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

** Speed keys
   Speed commands enable single-letter commands in Org-mode files when
   the point is at the beginning of a headline, or at the beginning of a
   code block.

   See the =org-speed-commands-default= variable for a list of the keys
   and commands enabled at the beginning of headlines.  All code blocks
   are available at the beginning of a code block, the following key
   sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
   display a list of the code blocks commands and their related keys.

   #+BEGIN_SRC emacs-lisp
  (setq org-use-speed-commands t)
   #+END_SRC

   #+RESULTS:
   : t

** Code blocks
   This activates a number of widely used languages, you are encouraged
   to activate more languages using the customize interface for the
   =org-babel-load-languages= variable, or with an elisp form like the
   one below.  The customize interface of =org-babel-load-languages=
   contains an up to date list of the currently supported languages.
   #+BEGIN_SRC emacs-lisp
     ;; Org-Mode Code Blocks
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        ;;(shell. t)
        (R . t)
        (perl . t)
        (ruby . t)
        (python . t)
        (js . t)
        (haskell . t)
        (elixir . t)))

   #+END_SRC

   #+RESULTS:

   The next block makes org-babel aware that a lower-case 'r' in a =src= block header should be processed as R. 

   #+source: add-r
   #+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes
               '("r" . ess-mode))
   #+END_SRC

   #+RESULTS: add-r
   : ((r . ess-mode) (arduino . arduino) (redis . redis) (php . php) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql))

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:

   The following displays the contents of code blocks in Org-mode files
   using the major-mode of the code.  It also changes the behavior of
   =TAB= to as if it were used in the appropriate major mode.  This means
   that reading and editing code form inside of your Org-mode files is
   much more like reading and editing of code using its major mode.
   #+BEGIN_SRC emacs-lisp
;; Code block fontification
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
   #+END_SRC

   #+RESULTS:
   : t

   Don't ask for confirmation on every =C-c C-c= code-block compile. 

   #+BEGIN_SRC emacs-lisp
;; Don't ask for confirmation on every =C-c C-c= code-block compile. 
  (setq org-confirm-babel-evaluate nil)
   #+END_SRC

   #+RESULTS:

** Ensure the Latest Org-mode manual is in the info directory
   By placing the =doc/= directory in Org-mode at the front of the
   =Info-directory-list= we can be sure that the latest version of the
   Org-mode manual is available to the =info= command (bound to =C-h i=).
   #+BEGIN_SRC emacs-lisp
;; Ensure the Latest Org-mode manual is in the info directory
  (unless (boundp 'Info-directory-list)
    (setq Info-directory-list Info-default-directory-list))
  (setq Info-directory-list
        (cons (expand-file-name
               "doc"
               (expand-file-name
                "org"
                (expand-file-name "src" dotfiles-dir)))
              Info-directory-list))
   #+END_SRC

   #+RESULTS:
   | /Users/abuckingham/.emacs.d/src/org/doc | /Users/abuckingham/.emacs.d/src/org/doc | /Users/abuckingham/.emacs.d/elpa/magit-20190405.1704 | /Users/abuckingham/.emacs.d/elpa/org-plus-contrib-20190402 | /Users/abuckingham/.emacs.d/elpa/transient-20190319.1928 | /Users/abuckingham/.emacs.d/elpa/with-editor-20190224.931 | /Applications/Emacs.app/Contents/Resources/info/ | /usr/local/share/info/ | /usr/share/info/ |

** Nice Bulleted Lists
   #+name: org-bullets
   #+BEGIN_SRC emacs-lisp :tangle no
;; Nice Bulleted Lists
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC

   #+source: message-line
   #+BEGIN_SRC emacs-lisp
;; It's silly, I know, but why not let Emacs greet me...? ;)
  (message "Welcome back, Andrew. Are you ready to save the world?")
   #+END_SRC
** Org-Capture
   #+BEGIN_SRC emacs-lisp
;; Let's keep our files in Dropbox
(setq org-directory "~/Dropbox/org")
(setq org-default-notes-file "~/Dropbox/org/refile.org")
(global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC
* Just One Space
  #+BEGIN_SRC emacs-lisp
;; Keybinding for just-one-space
;; recommended by Bozhidar: http://emacsredux.com/blog/2013/05/19/delete-whitespace-around-point/
(global-set-key (kbd "C-c j") 'just-one-space)
  #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/yasnippet")
    (require 'yasnippet) ;; not yasnippet-bundle
    (yas-global-mode 1)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
;; Load my snippets
(add-to-list 'load-path "~/.emacs.d/snippets/web-mode/")
(add-to-list 'load-path "~/.emacs.d/snippets/markdown-mode/")
(add-to-list 'load-path "~/.emacs.d/snippets/org-mode")
(add-to-list 'load-path "~/.emacs.d/snippets/ruby-mode")
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
;;Load Popup-Snippets
(add-to-list 'load-path "~/.emacs.d/vendor/")

(require 'popup)
;; add some shotcuts in popup menu mode
(define-key popup-menu-keymap (kbd "M-n") 'popup-next)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
(define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
(define-key popup-menu-keymap (kbd "M-p") 'popup-previous)

(defun yas/popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t
     )))

(setq yas/prompt-functions '(yas/popup-isearch-prompt yas/no-prompt))
  #+END_SRC

  
  #+BEGIN_SRC emacs-lisp

  
  ;; This is on hold...not really using MobileOrg now, but might change my mind later...
  ;; (setq org-directory "~/Dropbox/org/")
  ;; (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg/")
  ;; (setq org-agenda-files (quote ("~/Dropbox/org/its-2014-2.org")))
  ;; (setq org-mobile-inbox-for-pull "~/Dropbox/Apps/MobileOrg/inbox.org")
  
  (setq yas-snippet-dirs
        '("/Users/abuckingham99/.emacs.d/elpa/yasnippet-20140314.255/snippets/"
          "/Users/abuckingham99/.emacs.d/snippets/"
          ))
  (yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
  
  ;; (add-to-list 'load-path
  ;;               "~/.emacs.d/snippets/html-mode/")

  #+END_SRC
  
* Add Urban Dictionary to Webjump

  #+BEGIN_SRC emacs-lisp
;; Set keyboard shortcut for webjump
(global-set-key (kbd "C-x g") 'webjump)

;; Add Urban Dictionary to webjump
(eval-after-load "webjump"
'(add-to-list 'webjump-sites
              '("Urban Dictionary" .
                [simple-query
                 "www.urbandictionary.com"
                 "http://www.urbandictionary.com/define.php?term="
                 ""])))
  #+END_SRC

* Backups
  #+BEGIN_SRC emacs-lisp


;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))

;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)

  #+END_SRC

* Toggle Eshell Visor
  #+BEGIN_SRC emacs-lisp
;;Source: http://rawsyntax.com/blog/learn-emacs-store-window-configuration/
(defun ab/toggle-eshell-visor ()
  "Brings up a visor like eshell buffer, filling the entire emacs frame"
  (interactive)
  (if (string= "eshell-mode" (eval 'major-mode))
      (jump-to-register :pre-eshell-visor-window-configuration)
    (window-configuration-to-register :pre-eshell-visor-window-configuration)
    (call-interactively 'eshell)
    (delete-other-windows)))

(global-set-key (kbd "C-c t") 'ab/toggle-eshell-visor)
  #+END_SRC
* Browse Kill Ring
  ;; How many times has the kill ring saved my bacon...?
  (require 'browse-kill-ring)
* Ace Jump Mode
  #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/ace-jump-mode*/")
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)

(define-key global-map (kbd "C-c j") 'ace-jump-mode)

;; enable a more powerful jump back function from ace jump mode

(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)

(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
  #+END_SRC
* Require Dired-X
  #+BEGIN_SRC emacs-lisp
;; Require Dired-X
(require 'dired-x)
  #+END_SRC

* My Macros
** Temporary

   #+BEGIN_SRC emacs-lisp
;; Turn pasted BB Sis Integration log into a CSV file
(fset 'ab/sis-integration-log
   [?\C-c ?\C-p ?\C-n ?\M-f ?\M-d ?\M-d ?\M-d ?, ?\M-\\ ?\M-f ?, ?\M-\\ ?\M-f ?, ?\M-\\ ?\M-f ?, ?\M-\\ ?\M-f ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a ?\M-d ?\C-d ?\C-e ?\C-r ?s ?i ?s ?\C-m ?\C-  ?\C-s ?n ?a ?m ?e ?\C-x ?\C-m ?d ?e ?l ?e ?t ?e ?- ?r ?e ?g ?i ?o ?n ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?s ?n ?a ?p ?s ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\C-e ?\C-r ?a ?c ?t ?i ?v ?e ?\C-m ?\M-b ?\M-f ?, ?\M-\\ ?\M-f ?\M-\\ ?\C-e ?\M-b ?\M-b ?\M-f ?, ?\M-\\ ?\C-n ?\C-a])
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
;; ab/sis-1
;; Remove all of the unnecessary text and whitespace, and format the line as csv
(fset 'ab/sis-1
   "\C-a\C-c\C-p\C-sselect sis\C-m\C-a\344\C-d\C-sname\C-m\346\342\C-o\C-rsis\C-m\342\346,\C-k\C-k\C-e\C-rsnap\C-m\342\346,\334\C-sfile\C-m,\334\346,\334\C-e\342\346\342\342\346,\334\C-n\C-a")

;; ab/sis-2
;; Create the column headers for the csv file
(fset 'ab/sis-2
   [?\C-a ?\C-c ?\C-p ?\C-n ?\C-o ?\C-n ?N ?a ?m ?e ?, ?D ?e ?s ?c ?r ?i ?p ?t ?i ?o ?n ?, ?T ?y ?p ?e ?, ?S ?a backspace ?t ?a ?t ?e ?, ?L ?a ?s ?t ?  ?E ?v ?e ?n ?t ?, ?R ?e ?c ?e ?n ?t ?  ?E ?r ?r ?o ?r ?s ?\C-k ?\C-c ?\C-p])
   #+END_SRC

* EmacsWiki Duplicate line LISP
  #+BEGIN_SRC emacs-lisp
  (defun ab/uniquify-all-lines-region (start end)
    "Find duplicate lines in region START to END keeping first occurrence."
    (interactive "*r")
    (save-excursion
      (let ((end (copy-marker end)))
        (while
            (progn
              (goto-char start)
              (re-search-forward "^\\(.*\\)\n\\(\\(.*\n\\)*\\)\\1\n" end t))
          (replace-match "\\1\n\\2")))))
  
  (defun ab/uniquify-all-lines-buffer ()
    "Delete duplicate lines in buffer and keep first occurrence."
    (interactive "*")
    (uniquify-all-lines-region (point-min) (point-max)))
  #+END_SRC
* Underline H1 Title
  #+BEGIN_SRC emacs-lisp
;; From Xah Lee: http://ergoemacs.org/misc/ask_emacs_tuesday_2013-08-27.html
(defun ab/add-title-underline ()
  "add ========= below current line, with the same number of chars."
  (interactive)
  (let (
         (num (- (line-end-position) (line-beginning-position) ))
         (ii 0))
    (end-of-line)
    (insert"\n")
    (while (< ii num)
      (insert"=")
      (setq ii (1+ ii) ) ) ))
  #+END_SRC 

* Markdown Mode

  #+BEGIN_SRC emacs-lisp
  ;;Autoload file types (.markdown; .md; .mkd)
  (autoload 'markdown-mode "markdown-mode"
       "Major mode for editing Markdown files" t)
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.mkd\\'" . markdown-mode))
  #+END_SRC
  
  #+BEGIN_SRC emacs-lisp
;; Use Marked.app as my Markdown viewer
(defun markdown-preview-file-with-marked ()
  "run Marked on the current file and revert the buffer"
  (interactive)
  (shell-command 
   (format "open -a /Applications/Marked\\ 2.app %s" 
	   (shell-quote-argument (buffer-file-name)))))

(global-set-key (kbd "\C-cm") 'markdown-preview-file-with-marked)
  #+END_SRC

* Add Title Underline
  Thanks to Xah Lee: http://ergoemacs.org/misc/ask_emacs_tuesday_2013-08-27.html
  #+BEGIN_SRC emacs-lisp
;; Thanks to Xah Lee: http://ergoemacs.org/misc/ask_emacs_tuesday_2013-08-27.html
(defun ab/add-title-underline ()
  "add ========= below current line, with same number of chars."
  (interactive)
  (let (
         (num (- (line-end-position) (line-beginning-position) ))
         (ii 0))
    (end-of-line)
    (insert "\n")
    (while (< ii num)
      (insert "=")
      (setq ii (1+ ii) ) ) ))

  #+END_SRC

*  Work Stuff
  #+BEGIN_SRC emacs-lisp
;; I use these for cleaning up some report data from R. Not really useful for anyone but me...
(fset 'ab/chat-regexp-home-pm
   "\223[0-\C-?\C-?6-9\\|10]\C-?\C-?\C-?(10)]\C-?\C-?\C-?\C-?\C-?+:\C-?\C-?\C-?\C-?]+:[0-9]+:[0-9]+,PM\C-eHome")

(fset 'ab/chat-regexp-office-am
   "\223[0-9]+:[0-9]+:[0-9]+,AM\C-eOffice")

(fset 'ab/chat-regexp-office-pm
   "\223[0-5]+:[0-9]+:[0-9]+,PM\C-eOffice")

  #+END_SRC

* ibuffer is an Improved version of list-buffers
  #+BEGIN_SRC emacs-lisp
;; ibuffer is an Improved version of list-buffers
(defalias 'list-buffers 'ibuffer)
  #+END_SRC

* Yas/Web-Mode Fix
  #+BEGIN_SRC emacs-lisp
;; From: https://github.com/fxbois/web-mode/issues/51
;; Fixes Yassnippet with web-mode

(defun yas-web-mode-fix ()
  (web-mode-buffer-refresh)
  (indent-for-tab-command))
(setq yas/after-exit-snippet-hook 'yas-web-mode-fix)
  
  #+END_SRC

* Add ispell
  #+BEGIN_SRC emacs-lisp
(setq ispell-program-name "/usr/local/bin/ispell")  
  #+END_SRC

* Autopair Global Mode
  #+BEGIN_SRC emacs-lisp
(setq autopair-global-mode t)
  #+END_SRC

* Ruby/Rails
  #+BEGIN_SRC emacs-lisp
  ;; Rake files are Ruby.    
    (dolist (exp '("Rakefile\\'" "\\.rake\\'"))
        (add-to-list 'auto-mode-alist
                     (cons exp 'ruby-mode)))
  #+END_SRC

* Add Ditaa code blocs to Org-Babel
  #+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((ditaa . t))) ; this line activates ditaa

(setq orgd-itaa-jar-path "/usr/local/Cellar/ditaa/0.9/libexec/ditaa0_9.jar")
  #+END_SRC
* Enable Projectile Mode
  #+BEGIN_SRC emacs-lisp
    ;; Require Helm-Projectile
    (require 'helm-projectile)
    (projectile-global-mode)

    (setq projectile-completion-system 'helm
          projectile-switch-project-action 'helm-projectile)

    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  #+END_SRC
* Auto-C
omplete, you...never mind...
  #+BEGIN_SRC emacs-lisp
;; (require 'auto-complete)
;; (global-auto-complete-mode t)
;; (auto-complete-mode t)
  #+END_SRC

  #+RESULTS:

* Add Org-Mode Markdown export back
  #+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  #+END_SRC
* Require server for Emacsclient 
  #+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
  #+END_SRC
* Require Robe
  #+BEGIN_SRC emacs-lisp
(require 'robe)
  #+END_SRC
* Require Rinari
  #+BEGIN_SRC emacs-lisp
(require 'rinari)
  #+END_SRC

* Custom Timestamps

  #+BEGIN_SRC emacs-lisp
(defun timestamp ()
  "Insert timestamp at point."
  (interactive)
  (insert (format-time-string "%a, %b %d, %Y %H:%M:%S %z")))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(defun jekyll-timestamp ()
  "Insert timestamp at point."
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S %:z")))
(global-set-key [f5] 'jekyll-timestamp)
  #+END_SRC

* Jekyll blogging

  #+BEGIN_SRC emacs-lisp
;; adapted from Peter Reavy's elisp solution: http://peterreavy.com/tech/2012/12/18/elisp-to-create-a-new-blog-post-in-Jekyll.html

(defun jekyll-new-post (title)
  "Start a new blog post"
  (setq path "~/jekyll/andrewbuckingham-source/_posts/")
  (interactive "sTitle: ")
  (find-file (concat path (format-time-string "%Y-%m-%d")
    "-" (replace-regexp-in-string " " "-" title) ".md"))
  (insert "---
layout: single
title: 
date: 
tags: []
---
")
  )
  #+END_SRC

* Web-Mode Indentation Hooks
  #+BEGIN_SRC emacs-lisp
;; For some reason, I've had trouble getting indentation to work properly. This fixed that.
(defun my-web-mode-hook ()
  "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-indent-style 2)
)
(add-hook 'web-mode-hook  'my-web-mode-hook)
  #+END_SRC

* Import env from shell
  #+BEGIN_SRC emacs-lisp
;;; import-env-from-shell.el --- Make Emacs use the environment set up by the user's shell

;; Copyright (C) 2013-2014 Vincent Goulet

;; Author: Vincent Goulet

;; This file is a modified version of exec-path-from-shell.el by
;; Steve Purcell <steve@sanityinc.com>
;; URL: https://github.com/purcell/exec-path-from-shell

;; This file is part of GNU Emacs.app Modified
;; http://vgoulet.act.ulaval.ca/emacs

;; GNU Emacs.app Modified is free software; you can redistribute it
;; and/or modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.

;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

(defgroup import-env-from-shell nil
  "Make Emacs use shell-defined values for $PATH etc."
  :prefix "import-env-from-shell-"
  :group 'environment)

(defcustom import-env-from-shell-variables
  '("PATH" "MANPATH" "LANG")
  "List of environment variables which are copied from the shell."
  :type '(repeat (string :tag "Environment variable"))
  :group 'import-env-from-shell)

(defvar import-env-from-shell-debug nil
  "Display debug info when non-nil.")

(defun import-env-from-shell--double-quote (s)
  "Double-quote S, escaping any double-quotes already contained in it."
  (concat "\"" (replace-regexp-in-string "\"" "\\\\\"" s) "\""))

(defun import-env-from-shell--tcsh-p (shell)
  "Return non-nil if SHELL appears to be tcsh."
  (string-match "tcsh$" shell))

(defun import-env-from-shell--login-arg (shell)
  "Return the name of the --login arg for SHELL."
  (if (import-env-from-shell--tcsh-p shell) "-d" "-l"))

(defcustom import-env-from-shell-arguments
  (list (import-env-from-shell--login-arg (getenv "SHELL")) "-i")
  "Additional arguments to pass to the shell.

The default value denotes an interactive login shell."
  :type '(repeat (string :tag "Shell argument"))
  :group 'import-env-from-shell)

(defun import-env-from-shell--debug (msg &rest args)
  "Print MSG and ARGS like `message', but only if debug output is enabled."
  (when import-env-from-shell-debug
    (apply 'message msg args)))

(defun import-env-from-shell--standard-shell-p (shell)
  "Return non-nil iff SHELL supports the standard ${VAR-default} syntax."
  (not (string-match "\\(fish\\|tcsh\\)$" shell)))

(defun import-env-from-shell-printf (str &optional args)
  "Return the result of printing STR in the user's shell.

Executes $SHELL as interactive login shell.

STR is inserted literally in a single-quoted argument to printf,
and may therefore contain backslashed escape sequences understood
by printf.

ARGS is an optional list of args which will be inserted by printf
in place of any % placeholders in STR. ARGS are not automatically
shell-escaped, so they may contain $ etc."
  (let* ((printf-bin (or (executable-find "printf") "printf"))
         (printf-command
          (concat printf-bin
                  " '__RESULT\\000" str "' "
                  (mapconcat #'import-env-from-shell--double-quote args " ")))
         (shell-args (append import-env-from-shell-arguments
                             (list "-c"
                                   (if (import-env-from-shell--standard-shell-p (getenv "SHELL"))
                                       printf-command
                                     (concat "sh -c " (shell-quote-argument printf-command))))))
         (shell (getenv "SHELL")))
    (with-temp-buffer
      (import-env-from-shell--debug "Invoking shell %s with args %S" shell shell-args)
      (let ((exit-code (apply #'call-process shell nil t nil shell-args)))
        (import-env-from-shell--debug "Shell printed: %S" (buffer-string))
        (unless (zerop exit-code)
          (error "Non-zero exit code from shell %s invoked with args %S.  Output was:\n%S"
                 shell shell-args (buffer-string))))
      (goto-char (point-min))
      (if (re-search-forward "__RESULT\0\\(.*\\)" nil t)
          (match-string 1)
        (error "Expected printf output from shell, but got: %S" (buffer-string))))))

(defun import-env-from-shell-getenvs (names)
  "Get the environment variables with NAMES from the user's shell.

Execute $SHELL according to `import-env-from-shell-arguments'.
The result is a list of (NAME . VALUE) pairs."
  (let* ((dollar-names (mapcar (lambda (n) (format "${%s-}" n)) names))
         (values (split-string (import-env-from-shell-printf
                                (mapconcat #'identity (make-list (length names) "%s") "\\000")
                                dollar-names) "\0")))
    (let (result)
      (while names
        (prog1
            (push (cons (car names) (car values)) result)
          (setq values (cdr values)
                names (cdr names))))
      result)))

(defun import-env-from-shell-getenv (name)
  "Get the environment variable NAME from the user's shell.

Execute $SHELL as interactive login shell, have it output the
variable of NAME and return this output as string."
  (cdr (assoc name (import-env-from-shell-getenvs (list name)))))

(defun import-env-from-shell-setenv (name value)
  "Set the value of environment var NAME to VALUE.
Additionally, if NAME is \"PATH\" then also set corresponding
variables such as `exec-path'."
  (setenv name value)
  (when (string-equal "PATH" name)
    (setq eshell-path-env value
          exec-path (append (parse-colon-path value) (list exec-directory)))))

(defun import-env-from-shell-copy-envs (names)
  "Set the environment variables with NAMES from the user's shell.

As a special case, if the variable is $PATH, then `exec-path' and
`eshell-path-env' are also set appropriately.  The result is an alist,
as described by `import-env-from-shell-getenvs'."
  (mapc (lambda (pair)
          (import-env-from-shell-setenv (car pair) (cdr pair)))
        (import-env-from-shell-getenvs names)))

(defun import-env-from-shell-copy-env (name)
  "Set the environment variable $NAME from the user's shell.

As a special case, if the variable is $PATH, then `exec-path' and
`eshell-path-env' are also set appropriately.  Return the value
of the environment variable."
  (interactive "sCopy value of which environment variable from shell? ")
  (cdar (import-env-from-shell-copy-envs (list name))))

(defun import-env-from-shell-initialize ()
  "Initialize environment from the user's shell.

The values of all the environment variables named in
`import-env-from-shell-variables' are set from the corresponding
values used in the user's shell."
  (interactive)
  (import-env-from-shell-copy-envs import-env-from-shell-variables))

(import-env-from-shell-initialize)

(provide 'import-env-from-shell)

  #+END_SRC

# * Screencast-graphiz-dot-mode
#   #+BEGIN_SRC elisp
# ;;; screencast-graphviz-dot-mode.el

# ;; Copyright (C) 2009 ESBEN Andreasen <esbenandreasen@gmail.com>

# ;; Authors: esbenandreasen <esbenandreasen@gmail.com>(new)

# ;; Keywords: screencast

# ;; This file is not an official part of emacs.

# ;; This program is free software; you can redistribute it and/or modify
# ;; it under the terms of the GNU General Public License as published by
# ;; the Free Software Foundation; either version 2, or (at your option)
# ;; any later version.

# ;; This program is distributed in the hope that it will be useful,
# ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
# ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# ;; GNU General Public License for more details.

# ;; You should have received a copy of the GNU General Public License
# ;; along with this program; if not, you can either send email to this
# ;; program's maintainer or write to: The Free Software Foundation,
# ;; Inc.; 59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.

# ;;; Code:

# (require 'screencast-record)
(defun screencast-graphviz-dot (&optional arg)
  (interactive "P")
  (apply
   (if arg
       'screencast-record 
     'screencast)
   '(
     "Hello, and welcome to the screencast for using graphviz-dot-mode in Emacs."n
     "Let's switch to the mode and start typing a graph."
     (graphviz-dot-mode)
     (i "dig")
     "Autocompletion:"
     (graphviz-dot-complete-word)
     (i "{")
     "Indentation rules:"
     (electric-graphviz-dot-terminate-line)
     (i "//")
     "comment-dwim support (with prefix to remove)"
     (comment-dwim t)
     (indent-for-tab-command)
     "font-locking:"n
     (i "the [color=blue]")
     (progn (font-lock-fontify-buffer)
            (electric-graphviz-dot-terminate-line)
            (electric-graphviz-dot-terminate-line)
            (electric-graphviz-dot-close-brace)
            (previous-line 1)
            (indent-for-tab-command)
            (split-window-vertically)
            (save-buffer)
            )
     "default compile command: dot -Tpng $PWD/name.dot > $PWD/name.png"
                                        ; here "dot -Tpng  graphviz-dot-mode.dot > graphviz-dot-mode.png"
     (compile compile-command)
     "Inlined preview:"
     (graphviz-dot-preview)
     "Compilation error handling:"
     (i "b [label=end}")
     (progn (save-buffer))
     (compile compile-command)
     "Go to the error and fix it:"
     (next-error)
     (end-of-line)
     (delete-backward-char 1)
     (i "]")
     (progn (save-buffer))
     (compile compile-command)
     "View in external tool:"
     (graphviz-dot-view)
     )
   "graphviz-dot-mode.dot"
   1 ()
   )
)

  #+END_SRC

* Enable minitest-mode for Ruby
  #+BEGIN_SRC emacs-lisp 
    ;; Enable minitest-mode for Ruby
    (add-hook 'ruby-mode-hook 'minitest-mode)
    (add-hook 'enh-ruby-mode-hook 'minitest-mode)
  #+END_SRC

* Setup Slime
#+BEGIN_SRC emacs-lisp
;;  (add-to-list 'load-path "~/.emacs.d/slime")
;;  (setq inferior-lisp-program "/usr/local/bin/sbcl")
;;  (require 'slime)
;;  (slime-setup)
#+END_SRC

* swank-js settings
#+BEGIN_SRC emacs-lisp
;  (autoload 'js2-mode "js2-mode" nil t)
;  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
;  (global-set-key [f5] 'slime-js-reload)
;  (add-hook 'js2-mode-hook
;            (lambda ()
;              (slime-js-minor-mode 1)))
 ; (load-file "~/.emacs.d/setup-slime-js.el")
#+END_SRC

* Hooks for org-clock-statusbar-app

#+begin_src emacs-lisp
(add-hook 'org-clock-in-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" (concat "tell application \"org-clock-statusbar\" to clock in \"" (replace-regexp-in-string "\"" "\\\\\"" org-clock-current-task) "\""))))
(add-hook 'org-clock-out-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" "tell application \"org-clock-statusbar\" to clock out")))
#+end_src

* Elixir Stuff


* Set default tab/space width to 2
#+begin_src emacs-lisp
(setq default-tab-width 2)
(setq-default indent-tabs-mode nil)
#+end_src

* Org-roam setup
  #+begin_src emacs-lisp
    (setq org-roam-directory "~/org-roam")
    (add-hook 'after-init-hook 'org-roam-mode)
  #+end_src
  
