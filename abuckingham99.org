#+TITLE: My Emacs Customizations
#+AUTHOR: Andrew Buckingham
#+OPTIONS: num:nil toc:nil

* Initial Setup

* early-init.el
Starting in Emacs 27+, =early-init.el= can be used for settings that can be applied before packages are loaded, including UI tweaks and garbage collection.

I've moved my 'UI/UX Tweaks' into this file, and delayed loading packages until =init.el=. These customizations are set before any packages are loaded.

#+begin_src emacs-lisp :tangle "early-init.el"
   
  ;; Disable UI elements before they're created
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'fringe-mode) (fringe-mode -1))

  ;; No splash screen on startup
  (setq inhibit-splash-screen t)

  ;; I prefer a blank *scratch* buffer
  (setq initial-scratch-message nil)
#+end_src

* TODO tangle only init blocks into init.el
#+begin_src emacs-lisp
  (add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src

* init.el
*** Just Y/N
By default, Emacs menus require you to confirm choices with a full "yes" or "no." I prefer to type "y" or "n".

   #+BEGIN_SRC emacs-lisp
     ;; type "y"/"n" instead of "yes"/"no"
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Set Visual Bell for errors. 
By default, errors produce an annoying "beep." This replaces that with a visual "flash."

#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src
   

** Set default font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Menlo" :height 170)
#+end_src

** Load default theme
   #+BEGIN_SRC emacs-lisp
     (load-theme 'modus-vivendi t)
   #+END_SRC

** Behold, the power of Powerline
   #+BEGIN_SRC emacs-lisp
     (require 'powerline)
     (powerline-center-theme)
   #+END_SRC

# * Set up my custom.el file
#   #+BEGIN_SRC emacs-lisp
# ;;Set up my custom.el file
# (setq custom-file "~/.emacs.d/custom.el")
# (load custom-file)
#   #+END_SRC

** Because Alt-x is usually too awkward
   A great tip from an old Steve Yegge [[Shttps://sites.google.com/site/steveyegge2/effective-emacs][blog post]] to make it easier to type =M-x= commands
  #+BEGIN_SRC emacs-lisp
;; A great tip from Steve Yegge. Because Alt-x is too awkward...
(global-set-key "\C-x\C-m" 'execute-extended-command)
;; Experimenting with 'helm-M-x; see 'Helm Keyboard Shortcuts,' above
  #+END_SRC

** Byte Recompile
  #+BEGIN_SRC emacs-lisp
;; Byte Recompile
(defun ab/byte-recompile ()
  (interactive)
  (byte-recompile-directory "~/.emacs.d" 0))
  #+END_SRC

** Set default tab/space width to 2
#+begin_src emacs-lisp
(setq default-tab-width 2)
(setq-default indent-tabs-mode nil)
#+end_src  

** Backups
  #+BEGIN_SRC emacs-lisp
;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))

;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)

  #+END_SRC
  


** Save Buffer History

Great tip from [[https://www.youtube.com/watch?v=TJrAkCyH6Dk][Protesilaos Stavrou]] to save a history of visited buffers when saving
#+begin_src emacs-lisp
  (setq savehist-mode 1)
  (setq savehist-additional-variables '(register-alist kill-ring))
#+end_src

* TODO Move package-specific cutomizations into custom files
* Use Helm Mode
There are other options that I'm curious about, but I'm still happy with Helm.
   #+BEGIN_SRC emacs-lisp
     ;; Use Helm Mode
     (helm-mode 1) 
   #+END_SRC

* Set up Helm Keyboard Shortcuts
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x RET") 'helm-M-x)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
     (global-set-key (kbd "C-x b") 'helm-mini)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     (global-set-key (kbd "C-c h o") 'helm-occur)
     (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
     (global-set-key (kbd "C-c h x") 'helm-register)
   #+END_SRC

# One-Off Functions  

* Multiple Cursors

  #+BEGIN_SRC emacs-lisp
;; Multiple Cursors
;; (Magnar is an Emacs god!)
;; https://github.com/magnars |http://www.emacsrocks.com 
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C->") 'mc/mark-all-words-like-this)
  #+END_SRC

** Goal columns are useful!
   #+BEGIN_SRC emacs-lisp
;; Goal columns are useful!
;; Enable set-goal-column
(put 'set-goal-column 'disabled nil)
   #+END_SRC

* Increment Number at Point

  #+BEGIN_SRC emacs-lisp
;; Increment Number at Point
;;Got this from EmacsWiki; enables incremental numbers. First input
  ;; numbers and then use this!
  (defun ab/increment-number-at-point ()
      (interactive)
      (skip-chars-backward "0123456789")
      (or (looking-at "[0123456789]+")
          (error "No number at point"))
      (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
  #+END_SRC

* Paren-Mode
#+BEGIN_SRC emacs-lisp
;; Paren-Mode
(require 'paren)
(show-paren-mode t)
#+END_SRC

* Add Urban Dictionary to Webjump

  #+BEGIN_SRC emacs-lisp
;; Set keyboard shortcut for webjump
(global-set-key (kbd "C-x g") 'webjump)

;; Add Urban Dictionary to webjump
(eval-after-load "webjump"
'(add-to-list 'webjump-sites
              '("Urban Dictionary" .
                [simple-query
                 "www.urbandictionary.com"
                 "http://www.urbandictionary.com/define.php?term="
                 ""])))
  #+END_SRC

* Browse Kill Ring
  ;; How many times has the kill ring saved my bacon...?
  (require 'browse-kill-ring)
* Ace Jump Mode
  #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/ace-jump-mode*/")
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)

(define-key global-map (kbd "C-c j") 'ace-jump-mode)

;; enable a more powerful jump back function from ace jump mode

(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)

(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
  #+END_SRC  

* Require Dired-X
  #+BEGIN_SRC emacs-lisp
;; Require Dired-X
(require 'dired-x)
  #+END_SRC

* My Macros
* EmacsWiki Duplicate line LISP
* Require Import Env from Shell
** TODO Add a summary of what this does
#+begin_src emacs-lisp
  (use-package import-env-from-shell
    :load-path "~/.emacs.d/vendor"
    :config
    (import-env-from-shell-initialize))

#+end_src

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    ;; (add-to-list 'load-path "~/.emacs.d/elpa/yasnippet")
    ;;     (require 'yasnippet) ;; not yasnippet-bundle
    ;;     (yas-global-mode 1)
    (use-package yasnippet
      :config
      (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
      (yas-global-mode 1))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
;; Load my snippets
(add-to-list 'load-path "~/.emacs.d/snippets/web-mode/")
(add-to-list 'load-path "~/.emacs.d/snippets/markdown-mode/")
(add-to-list 'load-path "~/.emacs.d/snippets/org-mode")
(add-to-list 'load-path "~/.emacs.d/snippets/ruby-mode")
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
;;Load Popup-Snippets
(add-to-list 'load-path "~/.emacs.d/vendor/")

(require 'popup)
;; add some shotcuts in popup menu mode
(define-key popup-menu-keymap (kbd "M-n") 'popup-next)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
(define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
(define-key popup-menu-keymap (kbd "M-p") 'popup-previous)

(defun yas/popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t
     )))

(setq yas/prompt-functions '(yas/popup-isearch-prompt yas/no-prompt))
  #+END_SRC

  
  #+BEGIN_SRC emacs-lisp
  ;; This is on hold...not really using MobileOrg now, but might change my mind later...
  ;; (setq org-directory "~/Dropbox/org/")
  ;; (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg/")
  ;; (setq org-agenda-files (quote ("~/Dropbox/org/its-2014-2.org")))
  ;; (setq org-mobile-inbox-for-pull "~/Dropbox/Apps/MobileOrg/inbox.org")
  
  (setq yas-snippet-dirs
        '("~/.emacs.d/elpa/yasnippet-20140314.255/snippets/"
          "~/.emacs.d/snippets/"
          ))
  (yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
  
  ;; (add-to-list 'load-path
  ;;               "~/.emacs.d/snippets/html-mode/")

  #+END_SRC
  
* Yas/Web-Mode Fix

* Auto-Complete, you...never mind...
  #+BEGIN_SRC emacs-lisp
    ;; (require 'auto-complete)
    ;; (global-auto-complete-mode t)
    ;; (auto-complete-mode t)
  #+END_SRC

* Webdev
  #+BEGIN_SRC emacs-lisp
;; Use web-mode whenever possible...
(setq auto-mode-alist (cons '("\\.html$" . web-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.aspx$" . web-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.erb$" . web-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.php$" . web-mode) auto-mode-alist))
  #+END_SRC

* Web-Mode Indentation Hooks
  #+BEGIN_SRC emacs-lisp
;; For some reason, I've had trouble getting indentation to work properly. This fixed that.
(defun my-web-mode-hook ()
  "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-indent-style 2)
)
(add-hook 'web-mode-hook  'my-web-mode-hook)
  #+END_SRC    


* Org-Mode 

** Require Org
   #+BEGIN_SRC emacs-lisp
;; Require Org-Mode
(require 'org)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
;; It's more convenient to press 'Return' to follow a link from Org an C-c C-l.
(setq org-return-follows-link t)    
   #+END_SRC

   #+begin_src emacs-lisp
     ;; Set up Org-Mode
     (add-to-list 'auto-mode-alist '("\\.org\\’" . org-mode))
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
     (setq org-log-done t)
   #+end_src
*** No HTML Postamble by default

   #+begin_src emacs-lisp
     (setq org-html-postamble nil)
   #+end_src


** Org-Mode Hooks
   Make yasnippet work properly with org-mode. 
   #+BEGIN_SRC emacs-lisp
;;  Make yasnippet work properly with org-mode. 
;;  (defun yas/org-very-safe-expand ()
;;    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil))
    (and (fboundp 'yas-expand) (yas-expand))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'org-tab-first-hook
                         'yas-org-very-safe-expand)
            ))

   #+END_SRC

   #+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-image-in-org)
              ;; yasnippet (using the new org-cycle hooks)
              ;;(make-variable-buffer-local 'yas/trigger-key)
              ;;(setq yas/trigger-key [tab])
              ;;(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              ;;(define-key yas/keymap [tab] 'yas/next-field)
              ))
   #+END_SRC

** Speed keys
   Speed commands enable single-letter commands in Org-mode files when
   the point is at the beginning of a headline, or at the beginning of a
   code block.

   See the =org-speed-commands-default= variable for a list of the keys
   and commands enabled at the beginning of headlines.  All code blocks
   are available at the beginning of a code block, the following key
   sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
   display a list of the code blocks commands and their related keys.

   #+BEGIN_SRC emacs-lisp
  (setq org-use-speed-commands t)
   #+END_SRC

** Code blocks
   This activates a number of widely used languages, you are encouraged
   to activate more languages using the customize interface for the
   =org-babel-load-languages= variable, or with an elisp form like the
   one below.  The customize interface of =org-babel-load-languages=
   contains an up to date list of the currently supported languages.
   #+BEGIN_SRC emacs-lisp
          ;; Org-Mode Code Blocks
          (org-babel-do-load-languages
           'org-babel-load-languages
           '((emacs-lisp . t)
             (shell . t)
             (R . t)
             (perl . t)
             (ruby . t)
             (python . t)
             (js . t)
             (haskell . t)
         ;;    (elixir . t)
             (restclient . t)
             ))
     
   #+END_SRC

   The next block makes org-babel aware that a lower-case 'r' in a =src= block header should be processed as R. 

   #+source: add-r
   #+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes
               '("r" . ess-mode))
   #+END_SRC

   
*** Add racket-mode
    #+begin_src emacs-lisp
      ;; (add-to-list 'org-src-lang-modes '("racket" . racket-mode))
      ;; (add-to-list 'load-path "~/.emacs.d/vendor/emacs-ob-racket/")
      
      ;; ;; Set path to racket interpreter
      ;; (setq org-babel-command:racket "/usr/local/bin/racket")
      
      ;; (require 'ob-racket)
      
    #+end_src

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:

   The following displays the contents of code blocks in Org-mode files
   using the major-mode of the code.  It also changes the behavior of
   =TAB= to as if it were used in the appropriate major mode.  This means
   that reading and editing code form inside of your Org-mode files is
   much more like reading and editing of code using its major mode.
   #+BEGIN_SRC emacs-lisp
;; Code block fontification
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
   #+END_SRC

   Don't ask for confirmation on every =C-c C-c= code-block compile. 

   #+BEGIN_SRC emacs-lisp
;; Don't ask for confirmation on every =C-c C-c= code-block compile. 
  (setq org-confirm-babel-evaluate nil)
   #+END_SRC


** Ensure the Latest Org-mode manual is in the info directory
   By placing the =doc/= directory in Org-mode at the front of the
   =Info-directory-list= we can be sure that the latest version of the
   Org-mode manual is available to the =info= command (bound to =C-h i=).
   #+BEGIN_SRC emacs-lisp
;; Ensure the Latest Org-mode manual is in the info directory
  (unless (boundp 'Info-directory-list)
    (setq Info-directory-list Info-default-directory-list))
  (setq Info-directory-list
        (cons (expand-file-name
               "doc"
               (expand-file-name
                "org"
                (expand-file-name "src" dotfiles-dir)))
              Info-directory-list))
   #+END_SRC


** Nice Bulleted Lists
   #+name: org-bullets
   #+BEGIN_SRC emacs-lisp
;; Nice Bulleted Lists
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC

   #+source: message-line

   #+BEGIN_SRC emacs-lisp
;; It's silly, I know, but why not let Emacs greet me...? ;)
  (message "Welcome back, Andrew. Are you ready to save the world?")
   #+END_SRC

** Org-Capture
   #+BEGIN_SRC emacs-lisp
;; Let's keep our files in Dropbox
(setq org-directory "~/Dropbox/org")
(setq org-default-notes-file "~/Dropbox/org/refile.org")
(global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC

** Add Org-Mode Markdown export back
  #+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  #+END_SRC

** Hooks for org-clock-statusbar-app

#+begin_src emacs-lisp
  (add-hook 'org-clock-in-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" (concat "tell application \"org-clock-statusbar\" to clock in \"" (replace-regexp-in-string "\"" "\\\\\"" org-clock-current-task) "\""))))
  (add-hook 'org-clock-out-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" "tell application \"org-clock-statusbar\" to clock out")))
#+end_src  


  #+BEGIN_SRC emacs-lisp
;; From: https://github.com/fxbois/web-mode/issues/51
;; Fixes Yassnippet with web-mode

(defun yas-web-mode-fix ()
  (web-mode-buffer-refresh)
  (indent-for-tab-command))
(setq yas/after-exit-snippet-hook 'yas-web-mode-fix)
  
  #+END_SRC

** Add Ditaa code blocs to Org-Babel
  #+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((ditaa . t))) ; this line activates ditaa

(setq orgd-itaa-jar-path "/usr/local/Cellar/ditaa/0.9/libexec/ditaa0_9.jar")
  #+END_SRC

** Org-Download
#+begin_src emacs-lisp
(require 'org-download)

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src

** Enable org export to md

** Org-roam setup
  #+begin_src emacs-lisp
    (setq org-roam-v2-ack t)
  #+end_src

  #+begin_src emacs-lisp
    (use-package org-roam
      :ensure t
      :defer t
      :init
      (setq org-roam-v2-ack t)
      
      :custom
      (org-roam-directory "~/org-roam")
      :bind (("C-c n f" . org-roam-node-find)
             ("C-c n l" . org-roam-buffer-toggle)
             ("C-c n i" . org-roam-node-insert)
             :map org-mode-map
             ("C-M-i" . completion-at-point))
      :config
      (org-roam-setup))    

  #+end_src   

** Org-Roam-UI
#+begin_src emacs-lisp
  (use-package websocket
                :after org-roam)

  (use-package org-roam-ui
                :after org-roam ;; or :after org
                ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
                ;;         a hookable mode anymore, you're advised to pick something yourself
                ;;         if you don't care about startup time, use
                ;;  :hook (after-init . org-roam-ui-mode)
                :config
                (setq org-roam-ui-sync-theme t
                      org-roam-ui-follow t
                      org-roam-ui-update-on-save t
                      org-roam-ui-open-on-start t))
#+end_src


* Enable Projectile Mode
   #+BEGIN_SRC emacs-lisp
     ;; Require Helm-Projectile
     (require 'helm-projectile)
     (projectile-global-mode)

     (setq projectile-completion-system 'helm
           projectile-switch-project-action 'helm-projectile)

     (global-set-key (kbd "C-c p h") 'helm-projectile-find-file)
   #+END_SRC

* Toggle Eshell Visor
  #+BEGIN_SRC emacs-lisp
;;Source: http://rawsyntax.com/blog/learn-emacs-store-window-configuration/
(defun ab/toggle-eshell-visor ()
  "Brings up a visor like eshell buffer, filling the entire emacs frame"
  (interactive)
  (if (string= "eshell-mode" (eval 'major-mode))
      (jump-to-register :pre-eshell-visor-window-configuration)
    (window-configuration-to-register :pre-eshell-visor-window-configuration)
    (call-interactively 'eshell)
    (delete-other-windows)))

(global-set-key (kbd "C-c t") 'ab/toggle-eshell-visor)
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
  (defun ab/uniquify-all-lines-region (start end)
    "Find duplicate lines in region START to END keeping first occurrence."
    (interactive "*r")
    (save-excursion
      (let ((end (copy-marker end)))
        (while
            (progn
              (goto-char start)
              (re-search-forward "^\\(.*\\)\n\\(\\(.*\n\\)*\\)\\1\n" end t))
          (replace-match "\\1\n\\2")))))
  
  (defun ab/uniquify-all-lines-buffer ()
    "Delete duplicate lines in buffer and keep first occurrence."
    (interactive "*")
    (uniquify-all-lines-region (point-min) (point-max)))
  #+END_SRC
* Underline H1 Title
  #+BEGIN_SRC emacs-lisp
;; From Xah Lee: http://ergoemacs.org/misc/ask_emacs_tuesday_2013-08-27.html
(defun ab/add-title-underline ()
  "add ========= below current line, with the same number of chars."
  (interactive)
  (let (
         (num (- (line-end-position) (line-beginning-position) ))
         (ii 0))
    (end-of-line)
    (insert"\n")
    (while (< ii num)
      (insert"=")
      (setq ii (1+ ii) ) ) ))
  #+END_SRC 

* Markdown Mode

  #+BEGIN_SRC emacs-lisp
  ;;Autoload file types (.markdown; .md; .mkd)
  (autoload 'markdown-mode "markdown-mode"
       "Major mode for editing Markdown files" t)
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.mkd\\'" . markdown-mode))
  #+END_SRC
  
  #+BEGIN_SRC emacs-lisp
;; Use Marked.app as my Markdown viewer
(defun markdown-preview-file-with-marked ()
  "run Marked on the current file and revert the buffer"
  (interactive)
  (shell-command 
   (format "open -a /Applications/Marked\\ 2.app %s" 
	   (shell-quote-argument (buffer-file-name)))))

(global-set-key (kbd "\C-cm") 'markdown-preview-file-with-marked)
  #+END_SRC

* Add Title Underline
  Thanks to Xah Lee: http://ergoemacs.org/misc/ask_emacs_tuesday_2013-08-27.html
  #+BEGIN_SRC emacs-lisp
;; Thanks to Xah Lee: http://ergoemacs.org/misc/ask_emacs_tuesday_2013-08-27.html
(defun ab/add-title-underline ()
  "add ========= below current line, with same number of chars."
  (interactive)
  (let (
         (num (- (line-end-position) (line-beginning-position) ))
         (ii 0))
    (end-of-line)
    (insert "\n")
    (while (< ii num)
      (insert "=")
      (setq ii (1+ ii) ) ) ))

  #+END_SRC


* ibuffer is an Improved version of list-buffers
  #+BEGIN_SRC emacs-lisp
;; ibuffer is an Improved version of list-buffers
(defalias 'list-buffers 'ibuffer)
  #+END_SRC


* Add ispell
  #+BEGIN_SRC emacs-lisp
(setq ispell-program-name "/usr/local/bin/ispell")  
  #+END_SRC

* Autopair Global Mode
  #+BEGIN_SRC emacs-lisp
(setq autopair-global-mode t)
  #+END_SRC


* Ruby/Rails
  #+BEGIN_SRC emacs-lisp
  ;; Rake files are Ruby.    
    (dolist (exp '("Rakefile\\'" "\\.rake\\'"))
        (add-to-list 'auto-mode-alist
                     (cons exp 'ruby-mode)))
  #+END_SRC  

** Require Robe
  #+BEGIN_SRC emacs-lisp
(require 'robe)
  #+END_SRC
** Require Rinari
#+BEGIN_SRC emacs-lisp
(require 'rinari)
#+END_SRC

** Custom Jekyll Timestamps

  #+BEGIN_SRC emacs-lisp
(defun timestamp ()
  "Insert timestamp at point."
  (interactive)
  (insert (format-time-string "%a, %b %d, %Y %H:%M:%S %z")))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(defun jekyll-timestamp ()
  "Insert timestamp at point."
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S %:z")))
(global-set-key [f5] 'jekyll-timestamp)
  #+END_SRC
** Jekyll blogging


  #+BEGIN_SRC emacs-lisp
;; adapted from Peter Reavy's elisp solution: http://peterreavy.com/tech/2012/12/18/elisp-to-create-a-new-blog-post-in-Jekyll.html

(defun jekyll-new-post (title)
  "Start a new blog post"
  (setq path "~/jekyll/andrewbuckingham-source/_posts/")
  (interactive "sTitle: ")
  (find-file (concat path (format-time-string "%Y-%m-%d")
    "-" (replace-regexp-in-string " " "-" title) ".md"))
  (insert "---
layout: single
title: 
date: 
tags: []
---
")
  )
  #+END_SRC

** Enable minitest-mode for Ruby
  #+BEGIN_SRC emacs-lisp 
    ;; Enable minitest-mode for Ruby
    (add-hook 'ruby-mode-hook 'minitest-mode)
    (add-hook 'enh-ruby-mode-hook 'minitest-mode)
  #+END_SRC


* Setup Slime
#+BEGIN_SRC emacs-lisp
;;  (add-to-list 'load-path "~/.emacs.d/slime")
;;  (setq inferior-lisp-program "/usr/local/bin/sbcl")
;;  (require 'slime)
;;  (slime-setup)
#+END_SRC

* swank-js settings
#+BEGIN_SRC emacs-lisp
;  (autoload 'js2-mode "js2-mode" nil t)
;  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
;  (global-set-key [f5] 'slime-js-reload)
;  (add-hook 'js2-mode-hook
;            (lambda ()
;              (slime-js-minor-mode 1)))
 ; (load-file "~/.emacs.d/setup-slime-js.el")
#+END_SRC

Andrew

* Elixir Stuff
  #+begin_src emacs-lisp
    ;; (require 'ob-elixir)
  #+end_src

* Exec Path from Shell
#+begin_src elisp
  (use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

* ASDF-VM
#+begin_src elisp
  (add-to-list 'exec-path "~/.asdf/shims")
  (setenv "PATH" (concat "~/.asdf/shims:" (getenv "PATH")))
#+end_src

*** TODO Merge into main LSP section
   #+begin_src emacs-lisp
     ;; (use-package lsp-mode
     ;;     :commands lsp
     ;;     :ensure t
     ;;     :diminish lsp-mode
     ;;     :hook
     ;;     (elixir-mode . lsp)
     ;;     :init
     ;;     (add-to-list 'exec-path "~/.emacs.d/vendor/elixir-ls-1.12/"))

   #+end_src

   
** Use Unicide Fonts
   #+begin_src emacs-lisp
     (use-package unicode-fonts
       :ensure t
       :config
       (unicode-fonts-setup))
   #+end_src


* LSP setup
  #+begin_src emacs-lisp
    (defun ab/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))

    (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :hook (lsp-mode . ab/lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-c p")
      :config
      (lsp-enable-which-key-integration t))

    (use-package lsp-ui
      :hook
      (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom))


    (use-package helm-lsp
      :commands helm-lsp-workspace-symbol)

    (use-package which-key
      :config
      (which-key-mode))

    (use-package typescript-mode
      :mode "\\.ts\\'"
      :mode "\\.tsx\\'"
      :mode "\\.js\\'"
      :hook
      (typescript-mode . lsp-deferred)
      :config
      (setq typescript-indent-level 2))


    (use-package company
      ;; :after lsp-mode
      ;; :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
                  ("<tab>" . company-complete-selection))
      (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))

    ;; (use-package company-box
    ;;   :hook
    ;;   (company-mode . company-box-mode))

  #+end_src
  
* Custom Functions
  #+begin_src emacs-lisp
    ;; Based on http://ezinearticles.com/?What-is-the-Average-Reading-Speed-and-the-Best-Rate-of-Reading?&id=2298503
    (defun ab/time-to-read ()
      "Calculate time to read the content(mins.)
           which is around 200 wpm."
      (let ((count (count-words-region)))
        (if (zerop count)
            (message "ERR: Cannot estimate time to read.")
          (setq ttr (fceiling (/ (/ count (/ 200 60.0)) 60.0))))
        ttr))
  #+end_src


* Integrate LLM
#+begin_src emacs-lisp
  (use-package gptel
  :ensure t
  :config
  (setq gptel-api-key "<your-openai-api-key>"
        gptel-default-model "gpt-4"))

  
  (setq gptel-default-model "gpt-4")            ;; Choose the model

#+end_src

* Store API Key
I might want to switch to gpg.

#+begin_src emacs-lisp
  (let ((secrets-file "~/.emacs.d/secrets.el"))
  (when (file-exists-p secrets-file)
    (load secrets-file)))
#+end_src


